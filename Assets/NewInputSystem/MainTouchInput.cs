//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.4.4
//     from Assets/NewInputSystem/MainTouchInput.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @MainTouchInput : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @MainTouchInput()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""MainTouchInput"",
    ""maps"": [
        {
            ""name"": ""TouchOnScreen"",
            ""id"": ""0beaa263-d0eb-47ec-a548-c22a5031bba7"",
            ""actions"": [
                {
                    ""name"": ""Touch"",
                    ""type"": ""Button"",
                    ""id"": ""0c107fed-7570-4616-b5c0-bd0e8b6b1e19"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""TouchPosition"",
                    ""type"": ""PassThrough"",
                    ""id"": ""b2180db2-5a7f-4120-854a-eb53a902d5d4"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Drag"",
                    ""type"": ""Button"",
                    ""id"": ""96c992e3-ae7e-4b56-93bc-5b2c5057e523"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": ""Hold"",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""1a29cf1b-f629-450b-bbcb-ff4c136cdb29"",
                    ""path"": ""<Touchscreen>/primaryTouch/press"",
                    ""interactions"": ""Press(behavior=2)"",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Touch"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""48064c3c-150b-48ab-9aa2-4ba448bfc858"",
                    ""path"": ""<Touchscreen>/primaryTouch/position"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""TouchPosition"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""e5adf686-da79-4271-bfbb-39c9d3dbb499"",
                    ""path"": ""<Touchscreen>/primaryTouch/position"",
                    ""interactions"": ""Press"",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Drag"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // TouchOnScreen
        m_TouchOnScreen = asset.FindActionMap("TouchOnScreen", throwIfNotFound: true);
        m_TouchOnScreen_Touch = m_TouchOnScreen.FindAction("Touch", throwIfNotFound: true);
        m_TouchOnScreen_TouchPosition = m_TouchOnScreen.FindAction("TouchPosition", throwIfNotFound: true);
        m_TouchOnScreen_Drag = m_TouchOnScreen.FindAction("Drag", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // TouchOnScreen
    private readonly InputActionMap m_TouchOnScreen;
    private ITouchOnScreenActions m_TouchOnScreenActionsCallbackInterface;
    private readonly InputAction m_TouchOnScreen_Touch;
    private readonly InputAction m_TouchOnScreen_TouchPosition;
    private readonly InputAction m_TouchOnScreen_Drag;
    public struct TouchOnScreenActions
    {
        private @MainTouchInput m_Wrapper;
        public TouchOnScreenActions(@MainTouchInput wrapper) { m_Wrapper = wrapper; }
        public InputAction @Touch => m_Wrapper.m_TouchOnScreen_Touch;
        public InputAction @TouchPosition => m_Wrapper.m_TouchOnScreen_TouchPosition;
        public InputAction @Drag => m_Wrapper.m_TouchOnScreen_Drag;
        public InputActionMap Get() { return m_Wrapper.m_TouchOnScreen; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(TouchOnScreenActions set) { return set.Get(); }
        public void SetCallbacks(ITouchOnScreenActions instance)
        {
            if (m_Wrapper.m_TouchOnScreenActionsCallbackInterface != null)
            {
                @Touch.started -= m_Wrapper.m_TouchOnScreenActionsCallbackInterface.OnTouch;
                @Touch.performed -= m_Wrapper.m_TouchOnScreenActionsCallbackInterface.OnTouch;
                @Touch.canceled -= m_Wrapper.m_TouchOnScreenActionsCallbackInterface.OnTouch;
                @TouchPosition.started -= m_Wrapper.m_TouchOnScreenActionsCallbackInterface.OnTouchPosition;
                @TouchPosition.performed -= m_Wrapper.m_TouchOnScreenActionsCallbackInterface.OnTouchPosition;
                @TouchPosition.canceled -= m_Wrapper.m_TouchOnScreenActionsCallbackInterface.OnTouchPosition;
                @Drag.started -= m_Wrapper.m_TouchOnScreenActionsCallbackInterface.OnDrag;
                @Drag.performed -= m_Wrapper.m_TouchOnScreenActionsCallbackInterface.OnDrag;
                @Drag.canceled -= m_Wrapper.m_TouchOnScreenActionsCallbackInterface.OnDrag;
            }
            m_Wrapper.m_TouchOnScreenActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Touch.started += instance.OnTouch;
                @Touch.performed += instance.OnTouch;
                @Touch.canceled += instance.OnTouch;
                @TouchPosition.started += instance.OnTouchPosition;
                @TouchPosition.performed += instance.OnTouchPosition;
                @TouchPosition.canceled += instance.OnTouchPosition;
                @Drag.started += instance.OnDrag;
                @Drag.performed += instance.OnDrag;
                @Drag.canceled += instance.OnDrag;
            }
        }
    }
    public TouchOnScreenActions @TouchOnScreen => new TouchOnScreenActions(this);
    public interface ITouchOnScreenActions
    {
        void OnTouch(InputAction.CallbackContext context);
        void OnTouchPosition(InputAction.CallbackContext context);
        void OnDrag(InputAction.CallbackContext context);
    }
}
